"use strict";

var menuToggle = document.getElementById("navToggleJs"),
    menuElements = Array.from(document.querySelectorAll("[data-menu-active]")),
    body = document.body,
    breakPointMdMin = 768;
var isMenuActive = !1;
menuToggle.addEventListener("click", function () {
  isMenuActive = !isMenuActive, body.style.overflow = isMenuActive ? "hidden" : "", menuElements.forEach(function (e) {
    e.dataset.menuActive = isMenuActive;
  });
}), window.addEventListener("resize", function () {
  window.innerWidth >= 768 ? body.style.overflow = "" : body.style.overflow = isMenuActive ? "hidden" : "";
}), svg4everybody();
var themeSwitch = document.getElementById("themeSwitchJs"),
    themeSwitchButtons = Array.from(themeSwitch.querySelectorAll("input")),
    trexImages = Array.from(document.querySelectorAll("#promoLogoJs svg")),
    documentHead = document.head,
    storageId = "theme";
var savedTheme = localStorage.getItem("theme"),
    theme = savedTheme || "light",
    activeButton = themeSwitch.querySelector("input[value='" + theme + "']");
var themeSwitchIcons = Array.from(themeSwitch.querySelectorAll("svg"));

function setTheme() {
  var e = document.getElementById("darkThemeStylesheetJs");
  e && isLightTheme() ? documentHead.removeChild(e) : e || isLightTheme() || documentHead.insertAdjacentHTML("beforeEnd", '<link id="darkThemeStylesheetJs" rel="stylesheet" href="css/dark.min.css"/>');
}

function isLightTheme() {
  return "light" === theme;
}

function setProperTrexImg() {
  trexImages && (isLightTheme() ? (trexImages[0].removeAttribute("hidden", ""), trexImages[1].setAttribute("hidden", "")) : (trexImages[0].setAttribute("hidden", ""), trexImages[1].removeAttribute("hidden", "")));
}

function setProperIcons() {
  themeSwitchButtons.forEach(function (e) {
    var t = e.nextElementSibling,
        n = Array.from(t.querySelectorAll("svg"));
    n[0].style.display = isLightTheme() ? "" : "none", n[1].style.display = isLightTheme() ? "none" : "";
  });
}

themeSwitchButtons.forEach(function (e) {
  e.addEventListener("click", function (e) {
    activeButton = e.target, theme = activeButton.value, setTheme(), setProperTrexImg(), setProperIcons(), localStorage.setItem("theme", theme);
  });
}), activeButton.click(), themeSwitch.hidden = !1;
var weather = {},
    weatherWidget = document.getElementById("weatherJs"),
    weatherElements = weatherWidget.children,
    temperature = weatherElements[0],
    description = weatherElements[1],
    key = "cc08a9b6485ede7aabff209e9615c53b";

function setPosition(e) {
  getWeather(e.coords.latitude, e.coords.longitude);
}

function getWeather(e, t) {
  var n = "http://api.openweathermap.org/data/2.5/weather?lat=".concat(e, "&lon=").concat(t, "&units=metric&appid=").concat(key, "&lang=ru"),
      r = new XMLHttpRequest();
  r.open("GET", n), r.onreadystatechange = function () {
    if (200 == r.status) {
      if (!r.responseText) return;

      var _e = JSON.parse(r.responseText);

      weather.temperature = stringifyTemperature(_e.main.temp), weather.description = _e.weather[0].description, displayWeather();
    }
  }, r.send();
}

function displayWeather() {
  temperature.textContent = weather.temperature, description.textContent = weather.description, weatherWidget.hidden = !1;
}

function stringifyTemperature(e) {
  return (e = Math.round(e)) > 0 ? e = "+".concat(e) : e < 0 && (e = "-{$temp}"), "".concat(e, "\xB0C");
}

navigator.geolocation && navigator.geolocation.getCurrentPosition(setPosition);
